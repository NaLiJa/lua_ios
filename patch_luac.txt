--- tmp/lua-5.3.4/src/lua.c	2017-01-12 18:14:26.000000000 +0100
+++ lua-5.3.4/src/lua.c	2018-03-28 09:56:34.000000000 +0200
@@ -19,7 +19,7 @@
 #include "lauxlib.h"
 #include "lualib.h"
 
-
+#include "ios_error.h"
 
 #if !defined(LUA_PROMPT)
 #define LUA_PROMPT		"> "
@@ -50,14 +50,14 @@
 #if defined(LUA_USE_POSIX)	/* { */
 
 #include <unistd.h>
-#define lua_stdin_is_tty()	isatty(0)
+#define lua_stdin_is_tty()	ios_isatty(0)
 
 #elif defined(LUA_USE_WINDOWS)	/* }{ */
 
 #include <io.h>
 #include <windows.h>
 
-#define lua_stdin_is_tty()	_isatty(_fileno(stdin))
+#define lua_stdin_is_tty()	_isatty(_fileno(thread_stdin))
 
 #else				/* }{ */
 
@@ -88,7 +88,7 @@
 #else				/* }{ */
 
 #define lua_readline(L,b,p) \
-        ((void)L, fputs(p, stdout), fflush(stdout),  /* show prompt */ \
+        ((void)L, fputs(p, thread_stdout), fflush(thread_stdout),  /* show prompt */ \
         fgets(b, LUA_MAXINPUT, stdin) != NULL)  /* get line */
 #define lua_saveline(L,line)	{ (void)L; (void)line; }
 #define lua_freeline(L,b)	{ (void)L; (void)b; }
@@ -593,7 +593,7 @@
 }
 
 
-int main (int argc, char **argv) {
+int lua_main (int argc, char **argv) {
   int status, result;
   lua_State *L = luaL_newstate();  /* create state */
   if (L == NULL) {
@@ -607,6 +607,9 @@
   result = lua_toboolean(L, -1);  /* get result */
   report(L, status);
   lua_close(L);
+    // Remember to re-init variables:
+  L = NULL;
+  globalL = NULL;
   return (result && status == LUA_OK) ? EXIT_SUCCESS : EXIT_FAILURE;
 }
 
