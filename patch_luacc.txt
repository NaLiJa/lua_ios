--- tmp/lua-5.4.4/src/luac.c	2021-11-04 17:42:28
+++ lua-5.4.4/src/luac.c	2022-12-09 14:50:26
@@ -24,6 +24,7 @@
 #include "lopnames.h"
 #include "lstate.h"
 #include "lundump.h"
+#include "ios_error.h"
 
 static void PrintFunction(const Proto* f, int full);
 #define luaU_print	PrintFunction
@@ -41,23 +42,23 @@
 
 static void fatal(const char* message)
 {
- fprintf(stderr,"%s: %s\n",progname,message);
+ fprintf(thread_stderr,"%s: %s\n",progname,message);
  exit(EXIT_FAILURE);
 }
 
 static void cannot(const char* what)
 {
- fprintf(stderr,"%s: cannot %s %s: %s\n",progname,what,output,strerror(errno));
+ fprintf(thread_stderr,"%s: cannot %s %s: %s\n",progname,what,output,strerror(errno));
  exit(EXIT_FAILURE);
 }
 
 static void usage(const char* message)
 {
  if (*message=='-')
-  fprintf(stderr,"%s: unrecognized option '%s'\n",progname,message);
+  fprintf(thread_stderr,"%s: unrecognized option '%s'\n",progname,message);
  else
-  fprintf(stderr,"%s: %s\n",progname,message);
- fprintf(stderr,
+  fprintf(thread_stderr,"%s: %s\n",progname,message);
+ fprintf(thread_stderr,
   "usage: %s [options] [filenames]\n"
   "Available options are:\n"
   "  -l       list (use -l -l for full listing)\n"
@@ -115,7 +116,7 @@
  }
  if (version)
  {
-  printf("%s\n",LUA_COPYRIGHT);
+  fprintf(thread_stdout, "%s\n",LUA_COPYRIGHT);
   if (version==argc-1) exit(EXIT_SUCCESS);
  }
  return i;
@@ -184,7 +185,7 @@
  if (listing) luaU_print(f,listing>1);
  if (dumping)
  {
-  FILE* D= (output==NULL) ? stdout : fopen(output,"wb");
+  FILE* D= (output==NULL) ? thread_stdout : fopen(output,"wb");
   if (D==NULL) cannot("open");
   lua_lock(L);
   luaU_dump(L,f,writer,D,stripping);
@@ -195,7 +196,7 @@
  return 0;
 }
 
-int main(int argc, char* argv[])
+int luac_main(int argc, char* argv[])
 {
  lua_State* L;
  int i=doargs(argc,argv);
@@ -208,6 +209,8 @@
  lua_pushlightuserdata(L,argv);
  if (lua_pcall(L,2,0,0)!=LUA_OK) fatal(lua_tostring(L,-1));
  lua_close(L);
+ // iOS: re-init variables
+ L = NULL; 
  return EXIT_SUCCESS;
 }
 
@@ -223,45 +226,45 @@
 {
  const char* s=getstr(ts);
  size_t i,n=tsslen(ts);
- printf("\"");
+ fprintf(thread_stdout, "\"");
  for (i=0; i<n; i++)
  {
   int c=(int)(unsigned char)s[i];
   switch (c)
   {
    case '"':
-	printf("\\\"");
+	fprintf(thread_stdout,"\\\"");
 	break;
    case '\\':
-	printf("\\\\");
+	fprintf(thread_stdout,"\\\\");
 	break;
    case '\a':
-	printf("\\a");
+	fprintf(thread_stdout,"\\a");
 	break;
    case '\b':
-	printf("\\b");
+	fprintf(thread_stdout,"\\b");
 	break;
    case '\f':
-	printf("\\f");
+	fprintf(thread_stdout,"\\f");
 	break;
    case '\n':
-	printf("\\n");
+	fprintf(thread_stdout,"\\n");
 	break;
    case '\r':
-	printf("\\r");
+	fprintf(thread_stdout,"\\r");
 	break;
    case '\t':
-	printf("\\t");
+	fprintf(thread_stdout,"\\t");
 	break;
    case '\v':
-	printf("\\v");
+	fprintf(thread_stdout,"\\v");
 	break;
    default:
-	if (isprint(c)) printf("%c",c); else printf("\\%03d",c);
+	if (isprint(c)) fprintf(thread_stdout,"%c",c); else fprintf(thread_stdout,"\\%03d",c);
 	break;
   }
  }
- printf("\"");
+ fprintf(thread_stdout,"\"");
 }
 
 static void PrintType(const Proto* f, int i)
@@ -270,27 +273,27 @@
  switch (ttypetag(o))
  {
   case LUA_VNIL:
-	printf("N");
+	fprintf(thread_stdout,"N");
 	break;
   case LUA_VFALSE:
   case LUA_VTRUE:
-	printf("B");
+	fprintf(thread_stdout,"B");
 	break;
   case LUA_VNUMFLT:
-	printf("F");
+	fprintf(thread_stdout,"F");
 	break;
   case LUA_VNUMINT:
-	printf("I");
+	fprintf(thread_stdout,"I");
 	break;
   case LUA_VSHRSTR:
   case LUA_VLNGSTR:
-	printf("S");
+	fprintf(thread_stdout,"S");
 	break;
   default:				/* cannot happen */
-	printf("?%d",ttypetag(o));
+	fprintf(thread_stdout,"?%d",ttypetag(o));
 	break;
  }
- printf("\t");
+ fprintf(thread_stdout,"\t");
 }
 
 static void PrintConstant(const Proto* f, int i)
@@ -299,31 +302,31 @@
  switch (ttypetag(o))
  {
   case LUA_VNIL:
-	printf("nil");
+	fprintf(thread_stdout,"nil");
 	break;
   case LUA_VFALSE:
-	printf("false");
+	fprintf(thread_stdout,"false");
 	break;
   case LUA_VTRUE:
-	printf("true");
+	fprintf(thread_stdout,"true");
 	break;
   case LUA_VNUMFLT:
 	{
 	char buff[100];
 	sprintf(buff,LUA_NUMBER_FMT,fltvalue(o));
-	printf("%s",buff);
-	if (buff[strspn(buff,"-0123456789")]=='\0') printf(".0");
+	fprintf(thread_stdout,"%s",buff);
+	if (buff[strspn(buff,"-0123456789")]=='\0') fprintf(thread_stdout,".0");
 	break;
 	}
   case LUA_VNUMINT:
-	printf(LUA_INTEGER_FMT,ivalue(o));
+	fprintf(thread_stdout,LUA_INTEGER_FMT,ivalue(o));
 	break;
   case LUA_VSHRSTR:
   case LUA_VLNGSTR:
 	PrintString(tsvalue(o));
 	break;
   default:				/* cannot happen */
-	printf("?%d",ttypetag(o));
+	fprintf(thread_stdout,"?%d",ttypetag(o));
 	break;
  }
 }
@@ -351,315 +354,315 @@
   int sbx=GETARG_sBx(i);
   int isk=GETARG_k(i);
   int line=luaG_getfuncline(f,pc);
-  printf("\t%d\t",pc+1);
-  if (line>0) printf("[%d]\t",line); else printf("[-]\t");
-  printf("%-9s\t",opnames[o]);
+  fprintf(thread_stdout,"\t%d\t",pc+1);
+  if (line>0) fprintf(thread_stdout,"[%d]\t",line); else fprintf(thread_stdout,"[-]\t");
+  fprintf(thread_stdout,"%-9s\t",opnames[o]);
   switch (o)
   {
    case OP_MOVE:
-	printf("%d %d",a,b);
+	fprintf(thread_stdout,"%d %d",a,b);
 	break;
    case OP_LOADI:
-	printf("%d %d",a,sbx);
+	fprintf(thread_stdout,"%d %d",a,sbx);
 	break;
    case OP_LOADF:
-	printf("%d %d",a,sbx);
+	fprintf(thread_stdout,"%d %d",a,sbx);
 	break;
    case OP_LOADK:
-	printf("%d %d",a,bx);
-	printf(COMMENT); PrintConstant(f,bx);
+	fprintf(thread_stdout,"%d %d",a,bx);
+	fprintf(thread_stdout,COMMENT); PrintConstant(f,bx);
 	break;
    case OP_LOADKX:
-	printf("%d",a);
-	printf(COMMENT); PrintConstant(f,EXTRAARG);
+	fprintf(thread_stdout,"%d",a);
+	fprintf(thread_stdout,COMMENT); PrintConstant(f,EXTRAARG);
 	break;
    case OP_LOADFALSE:
-	printf("%d",a);
+	fprintf(thread_stdout,"%d",a);
 	break;
    case OP_LFALSESKIP:
-	printf("%d",a);
+	fprintf(thread_stdout,"%d",a);
 	break;
    case OP_LOADTRUE:
-	printf("%d",a);
+	fprintf(thread_stdout,"%d",a);
 	break;
    case OP_LOADNIL:
-	printf("%d %d",a,b);
-	printf(COMMENT "%d out",b+1);
+	fprintf(thread_stdout,"%d %d",a,b);
+	fprintf(thread_stdout,COMMENT "%d out",b+1);
 	break;
    case OP_GETUPVAL:
-	printf("%d %d",a,b);
-	printf(COMMENT "%s",UPVALNAME(b));
+	fprintf(thread_stdout,"%d %d",a,b);
+	fprintf(thread_stdout,COMMENT "%s",UPVALNAME(b));
 	break;
    case OP_SETUPVAL:
-	printf("%d %d",a,b);
-	printf(COMMENT "%s",UPVALNAME(b));
+	fprintf(thread_stdout,"%d %d",a,b);
+	fprintf(thread_stdout,COMMENT "%s",UPVALNAME(b));
 	break;
    case OP_GETTABUP:
-	printf("%d %d %d",a,b,c);
-	printf(COMMENT "%s",UPVALNAME(b));
-	printf(" "); PrintConstant(f,c);
+	fprintf(thread_stdout,"%d %d %d",a,b,c);
+	fprintf(thread_stdout,COMMENT "%s",UPVALNAME(b));
+	fprintf(thread_stdout," "); PrintConstant(f,c);
 	break;
    case OP_GETTABLE:
-	printf("%d %d %d",a,b,c);
+	fprintf(thread_stdout,"%d %d %d",a,b,c);
 	break;
    case OP_GETI:
-	printf("%d %d %d",a,b,c);
+	fprintf(thread_stdout,"%d %d %d",a,b,c);
 	break;
    case OP_GETFIELD:
-	printf("%d %d %d",a,b,c);
-	printf(COMMENT); PrintConstant(f,c);
+	fprintf(thread_stdout,"%d %d %d",a,b,c);
+	fprintf(thread_stdout,COMMENT); PrintConstant(f,c);
 	break;
    case OP_SETTABUP:
-	printf("%d %d %d%s",a,b,c,ISK);
-	printf(COMMENT "%s",UPVALNAME(a));
-	printf(" "); PrintConstant(f,b);
-	if (isk) { printf(" "); PrintConstant(f,c); }
+	fprintf(thread_stdout,"%d %d %d%s",a,b,c,ISK);
+	fprintf(thread_stdout,COMMENT "%s",UPVALNAME(a));
+	fprintf(thread_stdout," "); PrintConstant(f,b);
+	if (isk) { fprintf(thread_stdout," "); PrintConstant(f,c); }
 	break;
    case OP_SETTABLE:
-	printf("%d %d %d%s",a,b,c,ISK);
-	if (isk) { printf(COMMENT); PrintConstant(f,c); }
+	fprintf(thread_stdout,"%d %d %d%s",a,b,c,ISK);
+	if (isk) { fprintf(thread_stdout,COMMENT); PrintConstant(f,c); }
 	break;
    case OP_SETI:
-	printf("%d %d %d%s",a,b,c,ISK);
-	if (isk) { printf(COMMENT); PrintConstant(f,c); }
+	fprintf(thread_stdout,"%d %d %d%s",a,b,c,ISK);
+	if (isk) { fprintf(thread_stdout,COMMENT); PrintConstant(f,c); }
 	break;
    case OP_SETFIELD:
-	printf("%d %d %d%s",a,b,c,ISK);
-	printf(COMMENT); PrintConstant(f,b);
-	if (isk) { printf(" "); PrintConstant(f,c); }
+	fprintf(thread_stdout,"%d %d %d%s",a,b,c,ISK);
+	fprintf(thread_stdout,COMMENT); PrintConstant(f,b);
+	if (isk) { fprintf(thread_stdout," "); PrintConstant(f,c); }
 	break;
    case OP_NEWTABLE:
-	printf("%d %d %d",a,b,c);
-	printf(COMMENT "%d",c+EXTRAARGC);
+	fprintf(thread_stdout,"%d %d %d",a,b,c);
+	fprintf(thread_stdout,COMMENT "%d",c+EXTRAARGC);
 	break;
    case OP_SELF:
-	printf("%d %d %d%s",a,b,c,ISK);
-	if (isk) { printf(COMMENT); PrintConstant(f,c); }
+	fprintf(thread_stdout,"%d %d %d%s",a,b,c,ISK);
+	if (isk) { fprintf(thread_stdout, COMMENT); PrintConstant(f,c); }
 	break;
    case OP_ADDI:
-	printf("%d %d %d",a,b,sc);
+	fprintf(thread_stdout, "%d %d %d",a,b,sc);
 	break;
    case OP_ADDK:
-	printf("%d %d %d",a,b,c);
-	printf(COMMENT); PrintConstant(f,c);
+	fprintf(thread_stdout, "%d %d %d",a,b,c);
+	fprintf(thread_stdout, COMMENT); PrintConstant(f,c);
 	break;
    case OP_SUBK:
-	printf("%d %d %d",a,b,c);
-	printf(COMMENT); PrintConstant(f,c);
+	fprintf(thread_stdout, "%d %d %d",a,b,c);
+	fprintf(thread_stdout, COMMENT); PrintConstant(f,c);
 	break;
    case OP_MULK:
-	printf("%d %d %d",a,b,c);
-	printf(COMMENT); PrintConstant(f,c);
+	fprintf(thread_stdout, "%d %d %d",a,b,c);
+	fprintf(thread_stdout, COMMENT); PrintConstant(f,c);
 	break;
    case OP_MODK:
-	printf("%d %d %d",a,b,c);
-	printf(COMMENT); PrintConstant(f,c);
+	fprintf(thread_stdout, "%d %d %d",a,b,c);
+	fprintf(thread_stdout, COMMENT); PrintConstant(f,c);
 	break;
    case OP_POWK:
-	printf("%d %d %d",a,b,c);
-	printf(COMMENT); PrintConstant(f,c);
+	fprintf(thread_stdout, "%d %d %d",a,b,c);
+	fprintf(thread_stdout, COMMENT); PrintConstant(f,c);
 	break;
    case OP_DIVK:
-	printf("%d %d %d",a,b,c);
-	printf(COMMENT); PrintConstant(f,c);
+	fprintf(thread_stdout, "%d %d %d",a,b,c);
+	fprintf(thread_stdout, COMMENT); PrintConstant(f,c);
 	break;
    case OP_IDIVK:
-	printf("%d %d %d",a,b,c);
-	printf(COMMENT); PrintConstant(f,c);
+	fprintf(thread_stdout, "%d %d %d",a,b,c);
+	fprintf(thread_stdout, COMMENT); PrintConstant(f,c);
 	break;
    case OP_BANDK:
-	printf("%d %d %d",a,b,c);
-	printf(COMMENT); PrintConstant(f,c);
+	fprintf(thread_stdout, "%d %d %d",a,b,c);
+	fprintf(thread_stdout, COMMENT); PrintConstant(f,c);
 	break;
    case OP_BORK:
-	printf("%d %d %d",a,b,c);
-	printf(COMMENT); PrintConstant(f,c);
+	fprintf(thread_stdout, "%d %d %d",a,b,c);
+	fprintf(thread_stdout, COMMENT); PrintConstant(f,c);
 	break;
    case OP_BXORK:
-	printf("%d %d %d",a,b,c);
-	printf(COMMENT); PrintConstant(f,c);
+	fprintf(thread_stdout, "%d %d %d",a,b,c);
+	fprintf(thread_stdout, COMMENT); PrintConstant(f,c);
 	break;
    case OP_SHRI:
-	printf("%d %d %d",a,b,sc);
+	fprintf(thread_stdout, "%d %d %d",a,b,sc);
 	break;
    case OP_SHLI:
-	printf("%d %d %d",a,b,sc);
+	fprintf(thread_stdout, "%d %d %d",a,b,sc);
 	break;
    case OP_ADD:
-	printf("%d %d %d",a,b,c);
+	fprintf(thread_stdout, "%d %d %d",a,b,c);
 	break;
    case OP_SUB:
-	printf("%d %d %d",a,b,c);
+	fprintf(thread_stdout, "%d %d %d",a,b,c);
 	break;
    case OP_MUL:
-	printf("%d %d %d",a,b,c);
+	fprintf(thread_stdout, "%d %d %d",a,b,c);
 	break;
    case OP_MOD:
-	printf("%d %d %d",a,b,c);
+	fprintf(thread_stdout, "%d %d %d",a,b,c);
 	break;
    case OP_POW:
-	printf("%d %d %d",a,b,c);
+	fprintf(thread_stdout, "%d %d %d",a,b,c);
 	break;
    case OP_DIV:
-	printf("%d %d %d",a,b,c);
+	fprintf(thread_stdout, "%d %d %d",a,b,c);
 	break;
    case OP_IDIV:
-	printf("%d %d %d",a,b,c);
+	fprintf(thread_stdout, "%d %d %d",a,b,c);
 	break;
    case OP_BAND:
-	printf("%d %d %d",a,b,c);
+	fprintf(thread_stdout, "%d %d %d",a,b,c);
 	break;
    case OP_BOR:
-	printf("%d %d %d",a,b,c);
+	fprintf(thread_stdout, "%d %d %d",a,b,c);
 	break;
    case OP_BXOR:
-	printf("%d %d %d",a,b,c);
+	fprintf(thread_stdout, "%d %d %d",a,b,c);
 	break;
    case OP_SHL:
-	printf("%d %d %d",a,b,c);
+	fprintf(thread_stdout, "%d %d %d",a,b,c);
 	break;
    case OP_SHR:
-	printf("%d %d %d",a,b,c);
+	fprintf(thread_stdout, "%d %d %d",a,b,c);
 	break;
    case OP_MMBIN:
-	printf("%d %d %d",a,b,c);
-	printf(COMMENT "%s",eventname(c));
+	fprintf(thread_stdout, "%d %d %d",a,b,c);
+	fprintf(thread_stdout, COMMENT "%s",eventname(c));
 	break;
    case OP_MMBINI:
-	printf("%d %d %d %d",a,sb,c,isk);
-	printf(COMMENT "%s",eventname(c));
-	if (isk) printf(" flip");
+	fprintf(thread_stdout, "%d %d %d %d",a,sb,c,isk);
+	fprintf(thread_stdout, COMMENT "%s",eventname(c));
+	if (isk) fprintf(thread_stdout, " flip");
 	break;
    case OP_MMBINK:
-	printf("%d %d %d %d",a,b,c,isk);
-	printf(COMMENT "%s ",eventname(c)); PrintConstant(f,b);
-	if (isk) printf(" flip");
+	fprintf(thread_stdout, "%d %d %d %d",a,b,c,isk);
+	fprintf(thread_stdout, COMMENT "%s ",eventname(c)); PrintConstant(f,b);
+	if (isk) fprintf(thread_stdout, " flip");
 	break;
    case OP_UNM:
-	printf("%d %d",a,b);
+	fprintf(thread_stdout, "%d %d",a,b);
 	break;
    case OP_BNOT:
-	printf("%d %d",a,b);
+	fprintf(thread_stdout, "%d %d",a,b);
 	break;
    case OP_NOT:
-	printf("%d %d",a,b);
+	fprintf(thread_stdout, "%d %d",a,b);
 	break;
    case OP_LEN:
-	printf("%d %d",a,b);
+	fprintf(thread_stdout, "%d %d",a,b);
 	break;
    case OP_CONCAT:
-	printf("%d %d",a,b);
+	fprintf(thread_stdout, "%d %d",a,b);
 	break;
    case OP_CLOSE:
-	printf("%d",a);
+	fprintf(thread_stdout, "%d",a);
 	break;
    case OP_TBC:
-	printf("%d",a);
+	fprintf(thread_stdout, "%d",a);
 	break;
    case OP_JMP:
-	printf("%d",GETARG_sJ(i));
-	printf(COMMENT "to %d",GETARG_sJ(i)+pc+2);
+	fprintf(thread_stdout, "%d",GETARG_sJ(i));
+	fprintf(thread_stdout, COMMENT "to %d",GETARG_sJ(i)+pc+2);
 	break;
    case OP_EQ:
-	printf("%d %d %d",a,b,isk);
+	fprintf(thread_stdout, "%d %d %d",a,b,isk);
 	break;
    case OP_LT:
-	printf("%d %d %d",a,b,isk);
+	fprintf(thread_stdout, "%d %d %d",a,b,isk);
 	break;
    case OP_LE:
-	printf("%d %d %d",a,b,isk);
+	fprintf(thread_stdout, "%d %d %d",a,b,isk);
 	break;
    case OP_EQK:
-	printf("%d %d %d",a,b,isk);
-	printf(COMMENT); PrintConstant(f,b);
+	fprintf(thread_stdout, "%d %d %d",a,b,isk);
+	fprintf(thread_stdout, COMMENT); PrintConstant(f,b);
 	break;
    case OP_EQI:
-	printf("%d %d %d",a,sb,isk);
+	fprintf(thread_stdout, "%d %d %d",a,sb,isk);
 	break;
    case OP_LTI:
-	printf("%d %d %d",a,sb,isk);
+	fprintf(thread_stdout, "%d %d %d",a,sb,isk);
 	break;
    case OP_LEI:
-	printf("%d %d %d",a,sb,isk);
+	fprintf(thread_stdout, "%d %d %d",a,sb,isk);
 	break;
    case OP_GTI:
-	printf("%d %d %d",a,sb,isk);
+	fprintf(thread_stdout, "%d %d %d",a,sb,isk);
 	break;
    case OP_GEI:
-	printf("%d %d %d",a,sb,isk);
+	fprintf(thread_stdout, "%d %d %d",a,sb,isk);
 	break;
    case OP_TEST:
-	printf("%d %d",a,isk);
+	fprintf(thread_stdout, "%d %d",a,isk);
 	break;
    case OP_TESTSET:
-	printf("%d %d %d",a,b,isk);
+	fprintf(thread_stdout, "%d %d %d",a,b,isk);
 	break;
    case OP_CALL:
-	printf("%d %d %d",a,b,c);
-	printf(COMMENT);
-	if (b==0) printf("all in "); else printf("%d in ",b-1);
-	if (c==0) printf("all out"); else printf("%d out",c-1);
+	fprintf(thread_stdout, "%d %d %d",a,b,c);
+	fprintf(thread_stdout, COMMENT);
+	if (b==0) fprintf(thread_stdout, "all in "); else fprintf(thread_stdout, "%d in ",b-1);
+	if (c==0) fprintf(thread_stdout, "all out"); else fprintf(thread_stdout, "%d out",c-1);
 	break;
    case OP_TAILCALL:
-	printf("%d %d %d%s",a,b,c,ISK);
-	printf(COMMENT "%d in",b-1);
+	fprintf(thread_stdout, "%d %d %d%s",a,b,c,ISK);
+	fprintf(thread_stdout, COMMENT "%d in",b-1);
 	break;
    case OP_RETURN:
-	printf("%d %d %d%s",a,b,c,ISK);
-	printf(COMMENT);
-	if (b==0) printf("all out"); else printf("%d out",b-1);
+	fprintf(thread_stdout, "%d %d %d%s",a,b,c,ISK);
+	fprintf(thread_stdout, COMMENT);
+	if (b==0) fprintf(thread_stdout, "all out"); else fprintf(thread_stdout, "%d out",b-1);
 	break;
    case OP_RETURN0:
 	break;
    case OP_RETURN1:
-	printf("%d",a);
+	fprintf(thread_stdout, "%d",a);
 	break;
    case OP_FORLOOP:
-	printf("%d %d",a,bx);
-	printf(COMMENT "to %d",pc-bx+2);
+	fprintf(thread_stdout, "%d %d",a,bx);
+	fprintf(thread_stdout, COMMENT "to %d",pc-bx+2);
 	break;
    case OP_FORPREP:
-	printf("%d %d",a,bx);
-	printf(COMMENT "exit to %d",pc+bx+3);
+	fprintf(thread_stdout, "%d %d",a,bx);
+	fprintf(thread_stdout, COMMENT "exit to %d",pc+bx+3);
 	break;
    case OP_TFORPREP:
-	printf("%d %d",a,bx);
-	printf(COMMENT "to %d",pc+bx+2);
+	fprintf(thread_stdout, "%d %d",a,bx);
+	fprintf(thread_stdout, COMMENT "to %d",pc+bx+2);
 	break;
    case OP_TFORCALL:
-	printf("%d %d",a,c);
+	fprintf(thread_stdout, "%d %d",a,c);
 	break;
    case OP_TFORLOOP:
-	printf("%d %d",a,bx);
-	printf(COMMENT "to %d",pc-bx+2);
+	fprintf(thread_stdout, "%d %d",a,bx);
+	fprintf(thread_stdout, COMMENT "to %d",pc-bx+2);
 	break;
    case OP_SETLIST:
-	printf("%d %d %d",a,b,c);
-	if (isk) printf(COMMENT "%d",c+EXTRAARGC);
+	fprintf(thread_stdout, "%d %d %d",a,b,c);
+	if (isk) fprintf(thread_stdout, COMMENT "%d",c+EXTRAARGC);
 	break;
    case OP_CLOSURE:
-	printf("%d %d",a,bx);
-	printf(COMMENT "%p",VOID(f->p[bx]));
+	fprintf(thread_stdout, "%d %d",a,bx);
+	fprintf(thread_stdout, COMMENT "%p",VOID(f->p[bx]));
 	break;
    case OP_VARARG:
-	printf("%d %d",a,c);
-	printf(COMMENT);
-	if (c==0) printf("all out"); else printf("%d out",c-1);
+	fprintf(thread_stdout, "%d %d",a,c);
+	fprintf(thread_stdout, COMMENT);
+	if (c==0) fprintf(thread_stdout, "all out"); else fprintf(thread_stdout, "%d out",c-1);
 	break;
    case OP_VARARGPREP:
-	printf("%d",a);
+	fprintf(thread_stdout, "%d",a);
 	break;
    case OP_EXTRAARG:
-	printf("%d",ax);
+	fprintf(thread_stdout, "%d",ax);
 	break;
 #if 0
    default:
-	printf("%d %d %d",a,b,c);
-	printf(COMMENT "not handled");
+	fprintf(thread_stdout, "%d %d %d",a,b,c);
+	fprintf(thread_stdout, COMMENT "not handled");
 	break;
 #endif
   }
-  printf("\n");
+  fprintf(thread_stdout, "\n");
  }
 }
 
@@ -676,14 +679,14 @@
   s="(bstring)";
  else
   s="(string)";
- printf("\n%s <%s:%d,%d> (%d instruction%s at %p)\n",
+ fprintf(thread_stdout, "\n%s <%s:%d,%d> (%d instruction%s at %p)\n",
 	(f->linedefined==0)?"main":"function",s,
 	f->linedefined,f->lastlinedefined,
 	S(f->sizecode),VOID(f));
- printf("%d%s param%s, %d slot%s, %d upvalue%s, ",
+ fprintf(thread_stdout, "%d%s param%s, %d slot%s, %d upvalue%s, ",
 	(int)(f->numparams),f->is_vararg?"+":"",SS(f->numparams),
 	S(f->maxstacksize),S(f->sizeupvalues));
- printf("%d local%s, %d constant%s, %d function%s\n",
+ fprintf(thread_stdout, "%d local%s, %d constant%s, %d function%s\n",
 	S(f->sizelocvars),S(f->sizek),S(f->sizep));
 }
 
@@ -691,26 +694,26 @@
 {
  int i,n;
  n=f->sizek;
- printf("constants (%d) for %p:\n",n,VOID(f));
+ fprintf(thread_stdout, "constants (%d) for %p:\n",n,VOID(f));
  for (i=0; i<n; i++)
  {
-  printf("\t%d\t",i);
+  fprintf(thread_stdout, "\t%d\t",i);
   PrintType(f,i);
   PrintConstant(f,i);
-  printf("\n");
+  fprintf(thread_stdout, "\n");
  }
  n=f->sizelocvars;
- printf("locals (%d) for %p:\n",n,VOID(f));
+ fprintf(thread_stdout, "locals (%d) for %p:\n",n,VOID(f));
  for (i=0; i<n; i++)
  {
-  printf("\t%d\t%s\t%d\t%d\n",
+  fprintf(thread_stdout, "\t%d\t%s\t%d\t%d\n",
   i,getstr(f->locvars[i].varname),f->locvars[i].startpc+1,f->locvars[i].endpc+1);
  }
  n=f->sizeupvalues;
- printf("upvalues (%d) for %p:\n",n,VOID(f));
+ fprintf(thread_stdout, "upvalues (%d) for %p:\n",n,VOID(f));
  for (i=0; i<n; i++)
  {
-  printf("\t%d\t%s\t%d\t%d\n",
+  fprintf(thread_stdout, "\t%d\t%s\t%d\t%d\n",
   i,UPVALNAME(i),f->upvalues[i].instack,f->upvalues[i].idx);
  }
 }
