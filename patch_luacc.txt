--- tmp/lua-5.3.4/src/luac.c	2015-03-12 02:58:27.000000000 +0100
+++ lua-5.3.4/src/luac.c	2018-02-09 23:28:55.000000000 +0100
@@ -21,6 +21,7 @@
 #include "lobject.h"
 #include "lstate.h"
 #include "lundump.h"
+#include "ios_error.h"
 
 static void PrintFunction(const Proto* f, int full);
 #define luaU_print	PrintFunction
@@ -37,23 +38,23 @@
 
 static void fatal(const char* message)
 {
- fprintf(stderr,"%s: %s\n",progname,message);
+ fprintf(thread_stderr,"%s: %s\n",progname,message);
  exit(EXIT_FAILURE);
 }
 
 static void cannot(const char* what)
 {
- fprintf(stderr,"%s: cannot %s %s: %s\n",progname,what,output,strerror(errno));
+ fprintf(thread_stderr,"%s: cannot %s %s: %s\n",progname,what,output,strerror(errno));
  exit(EXIT_FAILURE);
 }
 
 static void usage(const char* message)
 {
  if (*message=='-')
-  fprintf(stderr,"%s: unrecognized option '%s'\n",progname,message);
+  fprintf(thread_stderr,"%s: unrecognized option '%s'\n",progname,message);
  else
-  fprintf(stderr,"%s: %s\n",progname,message);
- fprintf(stderr,
+  fprintf(thread_stderr,"%s: %s\n",progname,message);
+ fprintf(thread_stderr,
   "usage: %s [options] [filenames]\n"
   "Available options are:\n"
   "  -l       list (use -l -l for full listing)\n"
@@ -111,7 +112,7 @@
  }
  if (version)
  {
-  printf("%s\n",LUA_COPYRIGHT);
+  fprintf(thread_stdout, "%s\n",LUA_COPYRIGHT);
   if (version==argc-1) exit(EXIT_SUCCESS);
  }
  return i;
@@ -178,7 +179,7 @@
  if (listing) luaU_print(f,listing>1);
  if (dumping)
  {
-  FILE* D= (output==NULL) ? stdout : fopen(output,"wb");
+  FILE* D= (output==NULL) ? thread_stdout : fopen(output,"wb");
   if (D==NULL) cannot("open");
   lua_lock(L);
   luaU_dump(L,f,writer,D,stripping);
@@ -189,7 +190,7 @@
  return 0;
 }
 
-int main(int argc, char* argv[])
+int luac_main(int argc, char* argv[])
 {
  lua_State* L;
  int i=doargs(argc,argv);
@@ -202,6 +203,7 @@
  lua_pushlightuserdata(L,argv);
  if (lua_pcall(L,2,0,0)!=LUA_OK) fatal(lua_tostring(L,-1));
  lua_close(L);
+ L = NULL; 
  return EXIT_SUCCESS;
 }
 
@@ -227,28 +229,28 @@
 {
  const char* s=getstr(ts);
  size_t i,n=tsslen(ts);
- printf("%c",'"');
+ fprintf(thread_stdout, "%c",'"');
  for (i=0; i<n; i++)
  {
   int c=(int)(unsigned char)s[i];
   switch (c)
   {
-   case '"':  printf("\\\""); break;
-   case '\\': printf("\\\\"); break;
-   case '\a': printf("\\a"); break;
-   case '\b': printf("\\b"); break;
-   case '\f': printf("\\f"); break;
-   case '\n': printf("\\n"); break;
-   case '\r': printf("\\r"); break;
-   case '\t': printf("\\t"); break;
-   case '\v': printf("\\v"); break;
+   case '"':  fprintf(thread_stdout,"\\\""); break;
+   case '\\': fprintf(thread_stdout,"\\\\"); break;
+   case '\a': fprintf(thread_stdout,"\\a"); break;
+   case '\b': fprintf(thread_stdout,"\\b"); break;
+   case '\f': fprintf(thread_stdout,"\\f"); break;
+   case '\n': fprintf(thread_stdout,"\\n"); break;
+   case '\r': fprintf(thread_stdout,"\\r"); break;
+   case '\t': fprintf(thread_stdout,"\\t"); break;
+   case '\v': fprintf(thread_stdout,"\\v"); break;
    default:	if (isprint(c))
-   			printf("%c",c);
+   			fprintf(thread_stdout,"%c",c);
 		else
-			printf("\\%03d",c);
+			fprintf(thread_stdout,"\\%03d",c);
   }
  }
- printf("%c",'"');
+ fprintf(thread_stdout,"%c",'"');
 }
 
 static void PrintConstant(const Proto* f, int i)
@@ -257,27 +259,27 @@
  switch (ttype(o))
  {
   case LUA_TNIL:
-	printf("nil");
+	fprintf(thread_stdout,"nil");
 	break;
   case LUA_TBOOLEAN:
-	printf(bvalue(o) ? "true" : "false");
+	fprintf(thread_stdout,bvalue(o) ? "true" : "false");
 	break;
   case LUA_TNUMFLT:
 	{
 	char buff[100];
 	sprintf(buff,LUA_NUMBER_FMT,fltvalue(o));
-	printf("%s",buff);
-	if (buff[strspn(buff,"-0123456789")]=='\0') printf(".0");
+	fprintf(thread_stdout,"%s",buff);
+	if (buff[strspn(buff,"-0123456789")]=='\0') fprintf(thread_stdout,".0");
 	break;
 	}
   case LUA_TNUMINT:
-	printf(LUA_INTEGER_FMT,ivalue(o));
+	fprintf(thread_stdout,LUA_INTEGER_FMT,ivalue(o));
 	break;
   case LUA_TSHRSTR: case LUA_TLNGSTR:
 	PrintString(tsvalue(o));
 	break;
   default:				/* cannot happen */
-	printf("? type=%d",ttype(o));
+	fprintf(thread_stdout,"? type=%d",ttype(o));
 	break;
  }
 }
@@ -300,49 +302,49 @@
   int bx=GETARG_Bx(i);
   int sbx=GETARG_sBx(i);
   int line=getfuncline(f,pc);
-  printf("\t%d\t",pc+1);
-  if (line>0) printf("[%d]\t",line); else printf("[-]\t");
-  printf("%-9s\t",luaP_opnames[o]);
+  fprintf(thread_stdout,"\t%d\t",pc+1);
+  if (line>0) fprintf(thread_stdout,"[%d]\t",line); else fprintf(thread_stdout, "[-]\t");
+  fprintf(thread_stdout, "%-9s\t",luaP_opnames[o]);
   switch (getOpMode(o))
   {
    case iABC:
-    printf("%d",a);
-    if (getBMode(o)!=OpArgN) printf(" %d",ISK(b) ? (MYK(INDEXK(b))) : b);
-    if (getCMode(o)!=OpArgN) printf(" %d",ISK(c) ? (MYK(INDEXK(c))) : c);
+    fprintf(thread_stdout, "%d",a);
+    if (getBMode(o)!=OpArgN) fprintf(thread_stdout, " %d",ISK(b) ? (MYK(INDEXK(b))) : b);
+    if (getCMode(o)!=OpArgN) fprintf(thread_stdout, " %d",ISK(c) ? (MYK(INDEXK(c))) : c);
     break;
    case iABx:
-    printf("%d",a);
-    if (getBMode(o)==OpArgK) printf(" %d",MYK(bx));
-    if (getBMode(o)==OpArgU) printf(" %d",bx);
+    fprintf(thread_stdout, "%d",a);
+    if (getBMode(o)==OpArgK) fprintf(thread_stdout, " %d",MYK(bx));
+    if (getBMode(o)==OpArgU) fprintf(thread_stdout, " %d",bx);
     break;
    case iAsBx:
-    printf("%d %d",a,sbx);
+    fprintf(thread_stdout, "%d %d",a,sbx);
     break;
    case iAx:
-    printf("%d",MYK(ax));
+    fprintf(thread_stdout, "%d",MYK(ax));
     break;
   }
   switch (o)
   {
    case OP_LOADK:
-    printf("\t; "); PrintConstant(f,bx);
+    fprintf(thread_stdout, "\t; "); PrintConstant(f,bx);
     break;
    case OP_GETUPVAL:
    case OP_SETUPVAL:
-    printf("\t; %s",UPVALNAME(b));
+    fprintf(thread_stdout, "\t; %s",UPVALNAME(b));
     break;
    case OP_GETTABUP:
-    printf("\t; %s",UPVALNAME(b));
-    if (ISK(c)) { printf(" "); PrintConstant(f,INDEXK(c)); }
+    fprintf(thread_stdout, "\t; %s",UPVALNAME(b));
+    if (ISK(c)) { fprintf(thread_stdout, " "); PrintConstant(f,INDEXK(c)); }
     break;
    case OP_SETTABUP:
-    printf("\t; %s",UPVALNAME(a));
-    if (ISK(b)) { printf(" "); PrintConstant(f,INDEXK(b)); }
-    if (ISK(c)) { printf(" "); PrintConstant(f,INDEXK(c)); }
+    fprintf(thread_stdout, "\t; %s",UPVALNAME(a));
+    if (ISK(b)) { fprintf(thread_stdout, " "); PrintConstant(f,INDEXK(b)); }
+    if (ISK(c)) { fprintf(thread_stdout, " "); PrintConstant(f,INDEXK(c)); }
     break;
    case OP_GETTABLE:
    case OP_SELF:
-    if (ISK(c)) { printf("\t; "); PrintConstant(f,INDEXK(c)); }
+    if (ISK(c)) { fprintf(thread_stdout, "\t; "); PrintConstant(f,INDEXK(c)); }
     break;
    case OP_SETTABLE:
    case OP_ADD:
@@ -361,31 +363,31 @@
    case OP_LE:
     if (ISK(b) || ISK(c))
     {
-     printf("\t; ");
-     if (ISK(b)) PrintConstant(f,INDEXK(b)); else printf("-");
-     printf(" ");
-     if (ISK(c)) PrintConstant(f,INDEXK(c)); else printf("-");
+     fprintf(thread_stdout, "\t; ");
+     if (ISK(b)) PrintConstant(f,INDEXK(b)); else fprintf(thread_stdout, "-");
+     fprintf(thread_stdout, " ");
+     if (ISK(c)) PrintConstant(f,INDEXK(c)); else fprintf(thread_stdout, "-");
     }
     break;
    case OP_JMP:
    case OP_FORLOOP:
    case OP_FORPREP:
    case OP_TFORLOOP:
-    printf("\t; to %d",sbx+pc+2);
+    fprintf(thread_stdout, "\t; to %d",sbx+pc+2);
     break;
    case OP_CLOSURE:
-    printf("\t; %p",VOID(f->p[bx]));
+    fprintf(thread_stdout, "\t; %p",VOID(f->p[bx]));
     break;
    case OP_SETLIST:
-    if (c==0) printf("\t; %d",(int)code[++pc]); else printf("\t; %d",c);
+    if (c==0) fprintf(thread_stdout, "\t; %d",(int)code[++pc]); else fprintf(thread_stdout, "\t; %d",c);
     break;
    case OP_EXTRAARG:
-    printf("\t; "); PrintConstant(f,ax);
+    fprintf(thread_stdout, "\t; "); PrintConstant(f,ax);
     break;
    default:
     break;
   }
-  printf("\n");
+  fprintf(thread_stdout, "\n");
  }
 }
 
@@ -401,14 +403,14 @@
   s="(bstring)";
  else
   s="(string)";
- printf("\n%s <%s:%d,%d> (%d instruction%s at %p)\n",
+ fprintf(thread_stdout, "\n%s <%s:%d,%d> (%d instruction%s at %p)\n",
  	(f->linedefined==0)?"main":"function",s,
 	f->linedefined,f->lastlinedefined,
 	S(f->sizecode),VOID(f));
- printf("%d%s param%s, %d slot%s, %d upvalue%s, ",
+ fprintf(thread_stdout, "%d%s param%s, %d slot%s, %d upvalue%s, ",
 	(int)(f->numparams),f->is_vararg?"+":"",SS(f->numparams),
 	S(f->maxstacksize),S(f->sizeupvalues));
- printf("%d local%s, %d constant%s, %d function%s\n",
+ fprintf(thread_stdout, "%d local%s, %d constant%s, %d function%s\n",
 	S(f->sizelocvars),S(f->sizek),S(f->sizep));
 }
 
@@ -416,25 +418,25 @@
 {
  int i,n;
  n=f->sizek;
- printf("constants (%d) for %p:\n",n,VOID(f));
+ fprintf(thread_stdout, "constants (%d) for %p:\n",n,VOID(f));
  for (i=0; i<n; i++)
  {
-  printf("\t%d\t",i+1);
+  fprintf(thread_stdout, "\t%d\t",i+1);
   PrintConstant(f,i);
-  printf("\n");
+  fprintf(thread_stdout, "\n");
  }
  n=f->sizelocvars;
- printf("locals (%d) for %p:\n",n,VOID(f));
+ fprintf(thread_stdout, "locals (%d) for %p:\n",n,VOID(f));
  for (i=0; i<n; i++)
  {
-  printf("\t%d\t%s\t%d\t%d\n",
+  fprintf(thread_stdout, "\t%d\t%s\t%d\t%d\n",
   i,getstr(f->locvars[i].varname),f->locvars[i].startpc+1,f->locvars[i].endpc+1);
  }
  n=f->sizeupvalues;
- printf("upvalues (%d) for %p:\n",n,VOID(f));
+ fprintf(thread_stdout, "upvalues (%d) for %p:\n",n,VOID(f));
  for (i=0; i<n; i++)
  {
-  printf("\t%d\t%s\t%d\t%d\n",
+  fprintf(thread_stdout, "\t%d\t%s\t%d\t%d\n",
   i,UPVALNAME(i),f->upvalues[i].instack,f->upvalues[i].idx);
  }
 }
